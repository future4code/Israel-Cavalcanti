{"version":3,"sources":["components/HomePage.js","components/ListPage.js","components/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","state","name","playlistChange","event","newNameValue","target","value","setState","createPLaylist","body","axios","post","headers","Authorization","then","alert","catch","type","placeholder","this","onChange","onClick","props","viewListPage","React","Component","DeletePlaylist","styled","span","axiosConfig","ListPage","allPlaylists","onClickDeletePlaylist","playlistId","delete","fetchAllPlaylist","error","get","response","data","result","list","backToHome","map","playlist","id","AppContainer","div","App","currentPage","changePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8RAkEeA,E,4MA9DbC,MAAQ,CACNC,KAAM,I,EAGRC,eAAiB,SAACC,GAChB,IAAMC,EAAeD,EAAME,OAAOC,MAClC,EAAKC,SAAS,CAAEN,KAAMG,K,EAGxBI,eAAiB,WACf,IAKMC,EAAO,CACXR,KAAM,EAAKD,MAAMC,MAGnBS,IACGC,KACC,sEACAF,EAZgB,CAClBG,QAAS,CACPC,cAAe,6BAahBC,MAAK,WACJC,MAAM,YAAD,OAAa,EAAKf,MAAMC,KAAxB,wBACL,EAAKM,SAAS,CAAEN,KAAM,QAEvBe,OAAM,WACLD,MAAM,+B,uDAKV,OACE,6BACE,8CACA,8FAGA,6BACA,2BACEE,KAAK,OACLC,YAAY,gBACZZ,MAAOa,KAAKnB,MAAMC,KAClBmB,SAAUD,KAAKjB,iBAEjB,4BAAQmB,QAASF,KAAKX,gBAAtB,SACA,6BACA,sDACA,sIAIA,6BACA,4BAAQa,QAASF,KAAKG,MAAMC,cAA5B,2B,GAzDeC,IAAMC,W,qICC7B,IAAMC,EAAiBC,IAAOC,KAAV,KAMdC,EAAc,CAClBjB,QAAS,CACPC,cAAe,4BAkEJiB,E,4MA7Db9B,MAAQ,CACN+B,aAAc,I,EAchBC,sBAAwB,SAACC,GACvBvB,IACGwB,OADH,8EAE2ED,GACvEJ,GAEDf,MAAK,WACJC,MAAM,+BACN,EAAKoB,sBAENnB,OAAM,SAACoB,GACNrB,MAAM,yC,iEAtBQ,IAAD,OACjBL,IACG2B,IACC,sEACAR,GAEDf,MAAK,SAACwB,GACL,EAAK/B,SAAS,CAAEwB,aAAcO,EAASC,KAAKC,OAAOC,Y,0CAoBvDtB,KAAKgB,qB,+BAGG,IAAD,OACP,OACE,6BACE,iDACA,mIAIA,4BAAQd,QAASF,KAAKG,MAAMoB,YAA5B,gBAECvB,KAAKnB,MAAM+B,aAAaY,KAAI,SAACC,GAC5B,OACE,4BACGA,EAAS3C,KAAM,IAChB,kBAACyB,EAAD,CACEL,QAAS,kBAAM,EAAKW,sBAAsBY,EAASC,MADrD,c,GAjDSrB,IAAMC,WCdLD,IAAMC,U,8FCI9B,IAAMqB,EAAenB,IAAOoB,IAAV,KAkCHC,E,4MA7BbhD,MAAQ,CACNiD,YAAa,Y,EAGfC,WAAa,WACoB,aAA3B,EAAKlD,MAAMiD,YACb,EAAK1C,SAAS,CAAE0C,YAAa,aAE7B,EAAK1C,SAAS,CAAE0C,YAAa,c,uDAK/B,MAA+B,aAA3B9B,KAAKnB,MAAMiD,YAEX,kBAACH,EAAD,KACE,kBAAC,EAAD,CAAUvB,aAAcJ,KAAK+B,cAK/B,kBAACJ,EAAD,KACE,kBAAC,EAAD,CAAUJ,WAAYvB,KAAK+B,kB,GAvBnB1B,IAAMC,WCEJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdjD,OAAM,SAAAoB,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.d48b5f19.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass HomePage extends React.Component {\r\n  state = {\r\n    name: \"\",\r\n  };\r\n\r\n  playlistChange = (event) => {\r\n    const newNameValue = event.target.value;\r\n    this.setState({ name: newNameValue });\r\n  };\r\n\r\n  createPLaylist = () => {\r\n    const axiosConfig = {\r\n      headers: {\r\n        Authorization: \"israel-cavalcanti-mello\",\r\n      },\r\n    };\r\n    const body = {\r\n      name: this.state.name,\r\n    };\r\n\r\n    axios\r\n      .post(\r\n        \"https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists\",\r\n        body,\r\n        axiosConfig\r\n      )\r\n      .then(() => {\r\n        alert(`Playlist ${this.state.name} created sucessful!`);\r\n        this.setState({ name: \"\" });\r\n      })\r\n      .catch(() => {\r\n        alert(\"Error creating playlist\");\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Criar playlist</h1>\r\n        <label>\r\n          Digite no campo abaixo o nome da playlist que deseja criar.\r\n        </label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Playlist name\"\r\n          value={this.state.name}\r\n          onChange={this.playlistChange}\r\n        />\r\n        <button onClick={this.createPLaylist}>Send!</button>\r\n        <hr />\r\n        <h1>Visualize as playlists</h1>\r\n        <label>\r\n          Para consultar as playlists criadas vá para a página de listagem\r\n          clicando no botão abaixo.\r\n        </label>\r\n        <br />\r\n        <button onClick={this.props.viewListPage}>View all Playlists</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\nconst DeletePlaylist = styled.span`\r\n  color: orange;\r\n  font-weight: bolder;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst axiosConfig = {\r\n  headers: {\r\n    Authorization: \"israel-cavalcanti-mello\",\r\n  },\r\n};\r\n\r\nclass ListPage extends React.Component {\r\n  state = {\r\n    allPlaylists: [],\r\n  };\r\n\r\n  fetchAllPlaylist() {\r\n    axios\r\n      .get(\r\n        \"https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists\",\r\n        axiosConfig\r\n      )\r\n      .then((response) => {\r\n        this.setState({ allPlaylists: response.data.result.list });\r\n      });\r\n  }\r\n\r\n  onClickDeletePlaylist = (playlistId) => {\r\n    axios\r\n      .delete(\r\n        `https://us-central1-labenu-apis.cloudfunctions.net/labefy/playlists/${playlistId}`,\r\n        axiosConfig\r\n      )\r\n      .then(() => {\r\n        alert(`Playlist deleted sucessful!`);\r\n        this.fetchAllPlaylist();\r\n      })\r\n      .catch((error) => {\r\n        alert(\"ERROR WHEN DELETING THE PLAYLIST!\");\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchAllPlaylist();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Playlists criadas</h1>\r\n        <p>\r\n          Aqui está a lista das suas playlists. Para retornar ao menu principal,\r\n          clique no botão abaixo.\r\n        </p>\r\n        <button onClick={this.props.backToHome}>Back to home</button>\r\n\r\n        {this.state.allPlaylists.map((playlist) => {\r\n          return (\r\n            <li>\r\n              {playlist.name}{\" \"}\r\n              <DeletePlaylist\r\n                onClick={() => this.onClickDeletePlaylist(playlist.id)}\r\n              >\r\n                X\r\n              </DeletePlaylist>\r\n            </li>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListPage;\r\n","import React from \"react\";\r\n\r\nclass LoginPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>WELCOME TO LABEFY!</h1>\r\n        <button onClick={this.props.viewLoginPage}>Start Labefy</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport HomePage from \"./components/HomePage.js\";\nimport ListPage from \"./components/ListPage\";\nimport LoginPage from \"./components/LoginPage\";\n\nconst AppContainer = styled.div`\n  text-align: center;\n`;\n\nclass App extends React.Component {\n  state = {\n    currentPage: \"HomePage\",\n  };\n\n  changePage = () => {\n    if (this.state.currentPage === \"HomePage\") {\n      this.setState({ currentPage: \"ListPage\" });\n    } else {\n      this.setState({ currentPage: \"HomePage\" });\n    }\n  };\n\n  render() {\n    if (this.state.currentPage === \"HomePage\") {\n      return (\n        <AppContainer>\n          <HomePage viewListPage={this.changePage} />\n        </AppContainer>\n      );\n    } else {\n      return (\n        <AppContainer>\n          <ListPage backToHome={this.changePage} />\n        </AppContainer>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}